!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:r}=e;this._name=n,this._link=r,this._cardSelector=t,this._handleImageClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardEl.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardEl.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick&&this._handleImageClick(this._name,this._link)}))}_handleDeleteCard(){this._cardEl.remove(),this._cardEl=null}_handleLikeIcon(){this._cardEl.querySelector(".card__like-button").classList.toggle("card__like-button_active")}generateCard(){return this._cardEl=this._getTemplate(),this._cardEl.querySelector(".card__name").textContent=this._name,this._cardImageElement=this._cardEl.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this._cardEl}}class t{constructor(e,t){if(this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,!this._form)throw new Error("Invalid form element passed to FormValidator")}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t&&(e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t&&(e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass))}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this.enableSubmitButton()}enableSubmitButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_setEventListeners(){this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}),0)}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class n extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._handleFormSubmit=t}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),this.close()}))}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}}const r={};var o;o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input-type-error",errorClass:"modal__error_visible"},document.querySelectorAll(o.formSelector).forEach((e=>{const s=new t(o,e),n=e.getAttribute("name");r[n]=s,s.enableValidation()}));const i=document.querySelector("#profile-name"),a=document.querySelector("#profile-description"),l=document.querySelector("#profile-edit-button");let c;document.querySelector("#preview-card-modal")?(c=new class extends s{constructor(e){if(super(e),!this._popupElement)throw new Error(`Popup element with selector '${e}' not found`);this._imageElement=this._popupElement.querySelector(".modal__preview-image"),this._captionElement=this._popupElement.querySelector(".modal__preview-caption")}open(e,t){this._imageElement.src=t,this._imageElement.alt=e,this._captionElement.textContent=e,super.open()}}("#preview-card-modal"),c.setEventListeners()):console.error("Element with ID #preview-card-modal not found in the DOM");const u=new n("#edit-profile-modal",(function(e){d.setUserInfo({name:e.name,job:e.description})}));u.setEventListeners();const m=new n("#add-card-modal",(function(e){const t={name:e.title,link:e.url};_.addItem(h(t))}));m.setEventListeners();const d=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}}({nameSelector:".profile__name",jobSelector:".profile__description"});l.addEventListener("click",(()=>{const e=d.getUserInfo();i.value=e.name,a.value=e.job,u.open()})),document.querySelector("#add-button").addEventListener("click",(()=>{m.open()}));const _=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=h(e);_.addItem(t)}},".cards__list");function h(t){return new e(t,"#card-template",p).generateCard()}function p(e,t){c.open(e,t)}_.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,